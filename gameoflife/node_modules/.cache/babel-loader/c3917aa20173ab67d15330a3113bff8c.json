{"ast":null,"code":"var _jsxFileName = \"/home/rootuser/Desktop/GameOfLife/gameoflife/src/App.js\";\nimport './App.css';\nimport { Component } from 'react';\nimport Rows from './Rows.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onCellClick = (indexCol, indexRow) => {\n      let gridTMP = this.state.gridArray;\n      gridTMP[indexRow][indexCol] = !gridTMP[indexRow][indexCol];\n      this.setState({\n        gridArray: gridTMP\n      });\n    };\n\n    this.state = {\n      //gridArray:[ [ \"1\", \"2\", \"3\"], [ \"4\", \"5\" , \"6\"], [ \"6\", \"7\" , \"8\"] ],\n      //gridArray:[ [ true, false, false], [ false, true , false], [ true, false , true] , [ false, false , false]],\n      gridArray: [],\n      gridXLength: 0,\n      gridYLength: 0\n    };\n  } // When clicked on a Cell, then switch that cells status.\n\n\n  // Function to call when the button is clicked.\n  stepFunction() {} // Function to calculate the next generation of hte current grid,\n  // according to the rules of the game of life.\n\n\n  calculateNextGeneration() {\n    let gridTMP = this.state.gridArray;\n    let current3x3Grid;\n    let currentCell;\n    let index1 = 0;\n\n    for (index1 = 0; index1 < 10; index1++) {\n      let index2;\n\n      for (index2 = 0; index2 < 10; index2++) {\n        let index3;\n\n        for (index3 = 0; index3 < 10; index3++) {\n          let index4;\n\n          for (index4 = 0; index4 < 10; index4++) {\n            // Check if the current cell is somewhere along the border of the Grid.\n            if (index1 == 0 || index1 == this.state.gridYLength || index2 == 0 || index1 == this.state.gridXLength) {\n              let top = false,\n                  bottom = false,\n                  right = false,\n                  left = false; // TODO: Figure out which one of the aboe conditions is true. \n\n              if (index1 == 0) {// The current cell is at the top border.\n              }\n\n              if (index2 == 0) {// The current cell is at the left border.\n              }\n\n              if (index1 == this.state.gridYLength) {// The current cell is at the bottom border.\n              }\n\n              if (index2 == this.state.gridXLength) {// The current cell is at the right border.\n              }\n            } else {// TODO\n              }\n          }\n        }\n\n        current3x3Cell.push();\n      }\n    }\n  }\n\n  determineArrayDimensions() {\n    let yLengthTMP = this.state.gridArray.length;\n    let xLengthTMP = this.state.gridArray.reduce((x, y) => Math.max(x, y.length), 0);\n    this.setState({\n      gridXLength: xLengthTMP\n    });\n    this.setState({\n      gridYLength: yLengthTMP\n    });\n  }\n\n  fillGrid() {\n    let gridTMP = this.state.gridArray;\n    let index1; // Fill Grid with false.\n\n    for (index1 = 0; index1 < 10; index1++) {\n      let index2;\n      let row = [];\n\n      for (index2 = 0; index2 < 10; index2++) {\n        row.push(false);\n      }\n\n      gridTMP.push(row);\n    }\n\n    this.setState({\n      gridArray: gridTMP\n    });\n  }\n\n  componentDidMount() {\n    this.fillGrid();\n    this.determineArrayDimensions();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"GridDiv\",\n          children: [this.state.gridArray.map((Element, index) => /*#__PURE__*/_jsxDEV(Rows, {\n            indexRow: index,\n            value: Element,\n            onCellClick: this.onCellClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 61\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            width: \"100px\",\n            height: \"100px\",\n            onClick: this.stepFunction(),\n            children: \"STEP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App; //              { this.state.gridArray.map(Element => Element.map(Element2 => <CellComp value={Element2}/>)) }","map":{"version":3,"sources":["/home/rootuser/Desktop/GameOfLife/gameoflife/src/App.js"],"names":["Component","Rows","App","constructor","props","onCellClick","indexCol","indexRow","gridTMP","state","gridArray","setState","gridXLength","gridYLength","stepFunction","calculateNextGeneration","current3x3Grid","currentCell","index1","index2","index3","index4","top","bottom","right","left","current3x3Cell","push","determineArrayDimensions","yLengthTMP","length","xLengthTMP","reduce","x","y","Math","max","fillGrid","row","componentDidMount","render","map","Element","index"],"mappings":"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","sourcesContent":["import './App.css';\nimport { Component } from 'react';\nimport Rows from './Rows.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      //gridArray:[ [ \"1\", \"2\", \"3\"], [ \"4\", \"5\" , \"6\"], [ \"6\", \"7\" , \"8\"] ],\n      //gridArray:[ [ true, false, false], [ false, true , false], [ true, false , true] , [ false, false , false]],\n      gridArray: [],\n\n      gridXLength: 0,\n      gridYLength: 0,\n\n    }\n  }\n\n  // When clicked on a Cell, then switch that cells status.\n  onCellClick = (indexCol, indexRow) => {\n    let gridTMP = this.state.gridArray;\n    gridTMP[indexRow][indexCol] = !gridTMP[indexRow][indexCol];\n\n    this.setState({gridArray: gridTMP});\n  }\n\n  // Function to call when the button is clicked.\n  stepFunction(){\n\n  }\n\n  // Function to calculate the next generation of hte current grid,\n  // according to the rules of the game of life.\n  calculateNextGeneration(){\n    let gridTMP = this.state.gridArray;\n    let current3x3Grid;\n    let currentCell;\n    let index1 = 0;\n\n    for (index1 = 0; index1 < 10; index1++){\n      let index2;\n      for (index2 = 0; index2 < 10; index2++){\n        let index3\n        for (index3 = 0; index3 < 10; index3++){\n          let index4;\n          for (index4 = 0; index4 < 10; index4++){\n\n            // Check if the current cell is somewhere along the border of the Grid.\n            if(index1 == 0 || index1 == this.state.gridYLength || index2 == 0 || index1 == this.state.gridXLength){\n              let top = false, bottom = false, right = false, left = false;\n              // TODO: Figure out which one of the aboe conditions is true. \n              if(index1 == 0){ // The current cell is at the top border.\n\n              }\n              if(index2 == 0){ // The current cell is at the left border.\n\n              }\n              if(index1 == this.state.gridYLength){ // The current cell is at the bottom border.\n\n              }\n              if(index2 == this.state.gridXLength){ // The current cell is at the right border.\n\n              }\n            }\n\n            else{\n              // TODO\n            }\n          }\n        }\n        current3x3Cell.push()\n      }\n    }\n  \n  }\n\n  determineArrayDimensions(){\n    let yLengthTMP = this.state.gridArray.length;\n    let xLengthTMP = this.state.gridArray.reduce((x, y) => Math.max(x, y.length), 0);\n\n    this.setState({gridXLength: xLengthTMP});\n    this.setState({gridYLength: yLengthTMP});\n  }\n  \n  fillGrid(){\n    let gridTMP = this.state.gridArray;\n\n    let index1;\n\n    // Fill Grid with false.\n    for (index1 = 0; index1 < 10; index1++){\n      let index2;\n      let row = [];\n      for (index2 = 0; index2 < 10; index2++){\n        row.push(false);\n      }\n      gridTMP.push(row)\n    }\n    \n    this.setState({ gridArray: gridTMP});\n\n  }\n\n  componentDidMount(){\n    this.fillGrid(); \n    this.determineArrayDimensions();\n  }\n\n  render(){\n    return (\n      \n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n  \n        <body>\n\n            <div className=\"GridDiv\">\n              { this.state.gridArray.map((Element, index)=> <Rows indexRow={index} value={Element} onCellClick={this.onCellClick}/>) }\n\n              <button width=\"100px\" height=\"100px\" onClick={this.stepFunction()}>STEP</button>\n            </div>\n\n        </body>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n//              { this.state.gridArray.map(Element => Element.map(Element2 => <CellComp value={Element2}/>)) }\n"]},"metadata":{},"sourceType":"module"}