{"ast":null,"code":"var _jsxFileName = \"/home/rootuser/Desktop/GameOfLife/gameoflife/src/App.js\";\nimport './App.css';\nimport { Component } from 'react';\nimport Rows from './Rows.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //gridArray:[ [ \"1\", \"2\", \"3\"], [ \"4\", \"5\" , \"6\"], [ \"6\", \"7\" , \"8\"] ],\n      //gridArray:[ [ true, false, false], [ false, true , false], [ true, false , true] , [ false, false , false]],\n      gridArray: [[], []],\n      gridXLength: 0,\n      gridYLength: 0\n    };\n  }\n\n  determineArrayDimensions() {\n    let yLengthTMP = this.state.gridArray.length;\n    let xLengthTMP = this.state.gridArray.reduce((x, y) => Math.max(x, y.length), 0);\n    this.setState({\n      gridXLength: xLengthTMP\n    });\n    this.setState({\n      gridYLength: yLengthTMP\n    });\n  }\n\n  fillGrid() {\n    let gridTMP = this.state.gridArray;\n    let index1;\n\n    for (index1 = 0; index1 < 100; index1++) {\n      let index2;\n\n      for (index2 = 0; index2 < 100; index2++) {\n        gridTMP[index][index2] = false;\n      }\n    } //gridTMP = [ [ true, false, false], [ false, true , false], [ true, false , true] , [ false, false , false]];\n\n\n    this.setState({\n      gridArray: gridTMP\n    });\n  }\n\n  componentDidMount() {\n    this.fillGrid();\n    this.determineArrayDimensions();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"GridDiv\",\n          children: this.state.gridArray.map(Element => /*#__PURE__*/_jsxDEV(Rows, {\n            value: Element\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 53\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App; //              { this.state.gridArray.map(Element => Element.map(Element2 => <CellComp value={Element2}/>)) }","map":{"version":3,"sources":["/home/rootuser/Desktop/GameOfLife/gameoflife/src/App.js"],"names":["Component","Rows","App","constructor","props","state","gridArray","gridXLength","gridYLength","determineArrayDimensions","yLengthTMP","length","xLengthTMP","reduce","x","y","Math","max","setState","fillGrid","gridTMP","index1","index2","index","componentDidMount","render","map","Element"],"mappings":";AAAA,OAAO,WAAP;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAC1BG,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACX;AACA;AACAC,MAAAA,SAAS,EAAE,CAAE,EAAF,EAAM,EAAN,CAHA;AAIXC,MAAAA,WAAW,EAAE,CAJF;AAKXC,MAAAA,WAAW,EAAE;AALF,KAAb;AAQD;;AAEDC,EAAAA,wBAAwB,GAAE;AACxB,QAAIC,UAAU,GAAG,KAAKL,KAAL,CAAWC,SAAX,CAAqBK,MAAtC;AACA,QAAIC,UAAU,GAAG,KAAKP,KAAL,CAAWC,SAAX,CAAqBO,MAArB,CAA4B,CAACC,CAAD,EAAIC,CAAJ,KAAUC,IAAI,CAACC,GAAL,CAASH,CAAT,EAAYC,CAAC,CAACJ,MAAd,CAAtC,EAA6D,CAA7D,CAAjB;AAEA,SAAKO,QAAL,CAAc;AAACX,MAAAA,WAAW,EAAEK;AAAd,KAAd;AACA,SAAKM,QAAL,CAAc;AAACV,MAAAA,WAAW,EAAEE;AAAd,KAAd;AACD;;AAEDS,EAAAA,QAAQ,GAAE;AACR,QAAIC,OAAO,GAAG,KAAKf,KAAL,CAAWC,SAAzB;AAEA,QAAIe,MAAJ;;AACA,SAAKA,MAAM,GAAG,CAAd,EAAiBA,MAAM,GAAG,GAA1B,EAA+BA,MAAM,EAArC,EAAwC;AACtC,UAAIC,MAAJ;;AAEA,WAAKA,MAAM,GAAG,CAAd,EAAiBA,MAAM,GAAG,GAA1B,EAA+BA,MAAM,EAArC,EAAwC;AACtCF,QAAAA,OAAO,CAACG,KAAD,CAAP,CAAeD,MAAf,IAAyB,KAAzB;AACD;AACF,KAVO,CAWR;;;AACA,SAAKJ,QAAL,CAAc;AAAEZ,MAAAA,SAAS,EAAEc;AAAb,KAAd;AACD;;AAGDI,EAAAA,iBAAiB,GAAE;AACjB,SAAKL,QAAL;AACA,SAAKV,wBAAL;AACD;;AAEDgB,EAAAA,MAAM,GAAE;AACN,wBAEE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAQ,QAAA,SAAS,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAA,+BAEI;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,oBACI,KAAKpB,KAAL,CAAWC,SAAX,CAAqBoB,GAArB,CAAyBC,OAAO,iBAAI,QAAC,IAAD;AAAM,YAAA,KAAK,EAAEA;AAAb;AAAA;AAAA;AAAA;AAAA,kBAApC;AADJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAeD;;AA1DyB;;AA8D5B,eAAezB,GAAf,C,CACA","sourcesContent":["import './App.css';\nimport { Component } from 'react';\nimport Rows from './Rows.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      //gridArray:[ [ \"1\", \"2\", \"3\"], [ \"4\", \"5\" , \"6\"], [ \"6\", \"7\" , \"8\"] ],\n      //gridArray:[ [ true, false, false], [ false, true , false], [ true, false , true] , [ false, false , false]],\n      gridArray: [ [], []],\n      gridXLength: 0,\n      gridYLength: 0,\n\n    }\n  }\n\n  determineArrayDimensions(){\n    let yLengthTMP = this.state.gridArray.length;\n    let xLengthTMP = this.state.gridArray.reduce((x, y) => Math.max(x, y.length), 0);\n\n    this.setState({gridXLength: xLengthTMP});\n    this.setState({gridYLength: yLengthTMP});\n  }\n  \n  fillGrid(){\n    let gridTMP = this.state.gridArray;\n\n    let index1;\n    for (index1 = 0; index1 < 100; index1++){\n      let index2;\n\n      for (index2 = 0; index2 < 100; index2++){\n        gridTMP[index][index2] = false;\n      }\n    }\n    //gridTMP = [ [ true, false, false], [ false, true , false], [ true, false , true] , [ false, false , false]];\n    this.setState({ gridArray: gridTMP});\n  }\n\n\n  componentDidMount(){\n    this.fillGrid(); \n    this.determineArrayDimensions();\n  }\n\n  render(){\n    return (\n      \n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n  \n        <body>\n\n            <div className=\"GridDiv\">\n              { this.state.gridArray.map(Element => <Rows value={Element}/>) }\n            </div>\n\n        </body>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n//              { this.state.gridArray.map(Element => Element.map(Element2 => <CellComp value={Element2}/>)) }\n"]},"metadata":{},"sourceType":"module"}