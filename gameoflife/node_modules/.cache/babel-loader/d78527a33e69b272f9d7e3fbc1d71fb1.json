{"ast":null,"code":"var _jsxFileName = \"/home/rootuser/Desktop/GameOfLife/gameoflife/src/App.js\";\nimport './App.css';\nimport { Component } from 'react';\nimport Rows from './Rows.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onCellClick = (indexCol, indexRow) => {\n      let gridTMP = this.state.gridArray;\n      gridTMP[indexRow][indexCol] = !gridTMP[indexRow][indexCol];\n      this.setState({\n        gridArray: gridTMP\n      });\n    };\n\n    this.state = {\n      //gridArray:[ [ \"1\", \"2\", \"3\"], [ \"4\", \"5\" , \"6\"], [ \"6\", \"7\" , \"8\"] ],\n      //gridArray:[ [ true, false, false], [ false, true , false], [ true, false , true] , [ false, false , false]],\n      gridArray: [],\n      biggergridArray: [],\n      gridXLength: 10,\n      gridYLength: 10\n    };\n  } // When clicked on a Cell, then switch that cells status.\n\n\n  // Function to call when the button is clicked.\n  stepFunction() {} // Function to calculate the next generation of hte current grid,\n  // according to the rules of the game of life.\n\n\n  calculateNextGeneration() {\n    let gridTMP = this.state.gridArray;\n    let biggerGrid = [];\n    let GridAroundCurrentCell3x3 = [];\n    let index1; // Fill the bigger Grid with false.\n\n    for (index1 = 0; index1 < this.state.gridYLength + 2; index1++) {\n      let index2;\n      let row = [];\n\n      for (index2 = 0; index2 < this.state.gridXLength + 2; index2++) {\n        // If the current cell is on the outermost loop of the bigger grid, fill it with false.\n        if (index1 == 0 || index1 == this.state.gridYLength + 1 || index2 == 0 || index2 == this.state.gridXLength + 1) {\n          row.push(false);\n          console.log(index1 + \" \" + index2);\n        } // If the current cell is NOT on the outermost loop of the bigger grid, fill it with the content the the grid.\n        else {\n            row.push(gridTMP[index1 - 1][index2 - 1]);\n          }\n      }\n\n      biggerGrid.push(row);\n    }\n\n    for (index1 = 0; index1 < this.state.gridYLength + 2; index1++) {\n      let index2;\n      let row = [];\n\n      for (index2 = 0; index2 < this.state.gridXLength + 2; index2++) {\n        // If the current cell is NOT on the outermost loop of the bigger grid, do the game of life things.\n        if (!(index1 == 0 || index1 == this.state.gridYLength + 1 || index2 == 0 || index2 == this.state.gridXLength + 1)) {\n          let index3;\n\n          for (index3 = 0; index3 < 3; index3++) {\n            let index4;\n            let row = [];\n\n            for (index4 = 0; index4 < 3; index4++) {}\n          }\n        }\n      }\n\n      biggerGrid.push(row);\n    }\n\n    this.setState({\n      biggergridArray: biggerGrid\n    }); //this.setState({ gridArray: biggerGrid});  // Use this line instead of the one above, to display the bigger grid instead of the original. \n  }\n\n  determineArrayDimensions() {\n    let yLengthTMP = this.state.gridArray.length;\n    let xLengthTMP = this.state.gridArray.reduce((x, y) => Math.max(x, y.length), 0);\n    this.setState({\n      gridXLength: xLengthTMP\n    });\n    this.setState({\n      gridYLength: yLengthTMP\n    });\n  }\n\n  fillGrid() {\n    let gridTMP = this.state.gridArray;\n    let index1; // Fill Grid with false.\n\n    for (index1 = 0; index1 < this.state.gridYLength; index1++) {\n      let index2;\n      let row = [];\n\n      for (index2 = 0; index2 < this.state.gridXLength; index2++) {\n        row.push(false);\n      }\n\n      gridTMP.push(row);\n    }\n\n    this.setState({\n      gridArray: gridTMP\n    });\n  }\n\n  componentDidMount() {\n    this.fillGrid();\n    this.determineArrayDimensions();\n    this.calculateNextGeneration();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"GridDiv\",\n          children: [this.state.gridArray.map((Element, index) => /*#__PURE__*/_jsxDEV(Rows, {\n            indexRow: index,\n            value: Element,\n            onCellClick: this.onCellClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 61\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            width: \"100px\",\n            height: \"100px\",\n            onClick: this.stepFunction(),\n            children: \"STEP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App; //              { this.state.gridArray.map(Element => Element.map(Element2 => <CellComp value={Element2}/>)) }","map":{"version":3,"sources":["/home/rootuser/Desktop/GameOfLife/gameoflife/src/App.js"],"names":["Component","Rows","App","constructor","props","onCellClick","indexCol","indexRow","gridTMP","state","gridArray","setState","biggergridArray","gridXLength","gridYLength","stepFunction","calculateNextGeneration","biggerGrid","GridAroundCurrentCell3x3","index1","index2","row","push","console","log","index3","index4","determineArrayDimensions","yLengthTMP","length","xLengthTMP","reduce","x","y","Math","max","fillGrid","componentDidMount","render","map","Element","index"],"mappings":"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","sourcesContent":["import './App.css';\nimport { Component } from 'react';\nimport Rows from './Rows.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      //gridArray:[ [ \"1\", \"2\", \"3\"], [ \"4\", \"5\" , \"6\"], [ \"6\", \"7\" , \"8\"] ],\n      //gridArray:[ [ true, false, false], [ false, true , false], [ true, false , true] , [ false, false , false]],\n      gridArray: [],\n      biggergridArray: [],\n\n      gridXLength: 10,\n      gridYLength: 10,\n\n    }\n  }\n\n  // When clicked on a Cell, then switch that cells status.\n  onCellClick = (indexCol, indexRow) => {\n    let gridTMP = this.state.gridArray;\n    gridTMP[indexRow][indexCol] = !gridTMP[indexRow][indexCol];\n\n    this.setState({gridArray: gridTMP});\n  }\n\n  // Function to call when the button is clicked.\n  stepFunction(){\n\n  }\n\n  // Function to calculate the next generation of hte current grid,\n  // according to the rules of the game of life.\n  calculateNextGeneration(){\n    let gridTMP = this.state.gridArray;\n    let biggerGrid = [];\n    let GridAroundCurrentCell3x3 = [];\n\n    let index1;\n\n    // Fill the bigger Grid with false.\n    for (index1 = 0; index1 < this.state.gridYLength + 2; index1++){\n      let index2;\n      let row = [];\n      for (index2 = 0; index2 < this.state.gridXLength + 2; index2++){\n        \n        // If the current cell is on the outermost loop of the bigger grid, fill it with false.\n        if(index1 == 0 || (index1 == this.state.gridYLength+1) || index2 == 0 || (index2 == this.state.gridXLength+1)){\n          row.push(false);\n          console.log(index1 + \" \" + index2);\n\n        }\n\n        // If the current cell is NOT on the outermost loop of the bigger grid, fill it with the content the the grid.\n        else{\n          row.push(gridTMP[index1-1][index2-1]);\n        }\n      }\n      biggerGrid.push(row)\n\n    }\n\n\n    for (index1 = 0; index1 < this.state.gridYLength + 2; index1++){\n      let index2;\n      let row = [];\n      for (index2 = 0; index2 < this.state.gridXLength + 2; index2++){\n        \n        // If the current cell is NOT on the outermost loop of the bigger grid, do the game of life things.\n        if(!(index1 == 0 || (index1 == this.state.gridYLength+1) || index2 == 0 || (index2 == this.state.gridXLength+1))){\n          let index3;\n          for (index3 = 0; index3 < 3; index3++){\n            let index4;\n            let row = [];\n            for (index4 = 0; index4 < 3; index4++){\n              \n\n            }      \n          }\n        }\n      }\n      biggerGrid.push(row)\n\n    }\n\n\n    this.setState({ biggergridArray: biggerGrid});\n    //this.setState({ gridArray: biggerGrid});  // Use this line instead of the one above, to display the bigger grid instead of the original. \n\n\n  }\n\n  determineArrayDimensions(){\n    let yLengthTMP = this.state.gridArray.length;\n    let xLengthTMP = this.state.gridArray.reduce((x, y) => Math.max(x, y.length), 0);\n\n    this.setState({gridXLength: xLengthTMP});\n    this.setState({gridYLength: yLengthTMP});\n\n\n  }\n  \n  fillGrid(){\n    let gridTMP = this.state.gridArray;\n\n    let index1;\n\n    // Fill Grid with false.\n    for (index1 = 0; index1 < this.state.gridYLength; index1++){\n      let index2;\n      let row = [];\n      for (index2 = 0; index2 < this.state.gridXLength; index2++){\n        row.push(false);\n      }\n      gridTMP.push(row)\n    }\n    \n    this.setState({ gridArray: gridTMP});\n\n  }\n\n  componentDidMount(){\n    this.fillGrid(); \n    this.determineArrayDimensions();\n    this.calculateNextGeneration();\n\n  }\n\n  render(){\n\n    return (\n      \n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n  \n        <body>\n\n            <div className=\"GridDiv\">\n              { this.state.gridArray.map((Element, index)=> <Rows indexRow={index} value={Element} onCellClick={this.onCellClick}/>) }\n\n              <button width=\"100px\" height=\"100px\" onClick={this.stepFunction()}>STEP</button>\n            </div>\n\n        </body>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n//              { this.state.gridArray.map(Element => Element.map(Element2 => <CellComp value={Element2}/>)) }\n"]},"metadata":{},"sourceType":"module"}