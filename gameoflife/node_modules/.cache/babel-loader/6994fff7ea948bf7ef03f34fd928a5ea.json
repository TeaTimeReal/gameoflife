{"ast":null,"code":"var _jsxFileName = \"/home/rootuser/Desktop/GameOfLife/gameoflife/src/App.js\";\nimport './App.css';\nimport { Component } from 'react';\nimport Rows from './Rows.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onCellClick = (indexCol, indexRow) => {\n      let gridTMP = this.state.gridArray;\n      gridTMP[indexRow][indexCol] = !gridTMP[indexRow][indexCol];\n      this.setState({\n        gridArray: gridTMP\n      });\n    };\n\n    this.state = {\n      //gridArray:[ [ \"1\", \"2\", \"3\"], [ \"4\", \"5\" , \"6\"], [ \"6\", \"7\" , \"8\"] ],\n      //gridArray:[ [ true, false, false], [ false, true , false], [ true, false , true] , [ false, false , false]],\n      gridArray: [],\n      biggergridArray: [],\n      gridXLength: 10,\n      //prompt(\"length\"),\n      gridYLength: 10 //prompt(\"height\"),\n\n    };\n  } // When clicked on a Cell, then switch that cells status.\n\n\n  // Function to call when the button is clicked.\n  stepFunction() {\n    var interval = setInterval(() => this.calculateNextGeneration(), 20); //this.calculateNextGeneration()\n  } // Function to calculate the next generation of hte current grid,\n  // according to the rules of the game of life.\n\n\n  calculateNextGeneration() {\n    let gridTMP = this.state.gridArray;\n    let newgridTMP = this.state.gridArray;\n    let biggerGrid = [];\n    let index1; // Fill the bigger Grid with the original grid and an outer line of cells with false.\n\n    for (index1 = 0; index1 < this.state.gridYLength + 2; index1++) {\n      let index2;\n      let row = [];\n\n      for (index2 = 0; index2 < this.state.gridXLength + 2; index2++) {\n        // If the current cell is on the outermost loop of the bigger grid, fill it with false.\n        if (index1 == 0 || index1 == this.state.gridYLength + 1 || index2 == 0 || index2 == this.state.gridXLength + 1) {\n          row.push(false);\n        } // If the current cell is NOT on the outermost loop of the bigger grid, fill it with the content the the grid.\n        else {\n            row.push(gridTMP[index1 - 1][index2 - 1]);\n          }\n      }\n\n      biggerGrid.push(row);\n    }\n\n    for (index1 = 0; index1 < this.state.gridYLength + 2; index1++) {\n      let index2;\n      let row = [];\n\n      for (index2 = 0; index2 < this.state.gridXLength + 2; index2++) {\n        // If the current cell is NOT on the outermost loop of the bigger grid, do the game of life things.\n        if (!(index1 == 0 || index1 == this.state.gridYLength + 1 || index2 == 0 || index2 == this.state.gridXLength + 1)) {\n          let GridAroundCurrentCell3x3 = [];\n          let index3;\n\n          for (index3 = 0; index3 < 3; index3++) {\n            let index4;\n            let row = [];\n\n            for (index4 = 0; index4 < 3; index4++) {\n              row.push(biggerGrid[index1 - 1 + index3][index2 - 1 + index4]);\n            }\n\n            GridAroundCurrentCell3x3.push(row);\n          }\n\n          let cellsAlive = 0; // Count the number of alive cells in the current 3x3 grid.\n\n          for (index3 = 0; index3 < 3; index3++) {\n            let index4;\n\n            for (index4 = 0; index4 < 3; index4++) {\n              if (GridAroundCurrentCell3x3[index3][index4] == true) {\n                cellsAlive++;\n              }\n            }\n          } // Simply reduce number of Cells alive by one if the current cell is alive itself.\n\n\n          if (GridAroundCurrentCell3x3[1][1] == true) {\n            cellsAlive--;\n          } // Check for which rule to apply.\n\n\n          if (cellsAlive < 2) {\n            newgridTMP[index1 - 1][index2 - 1] = false;\n          }\n\n          if (cellsAlive >= 4) {\n            newgridTMP[index1 - 1][index2 - 1] = false;\n          }\n\n          if (cellsAlive === 3 && GridAroundCurrentCell3x3[1][1] == false) {\n            newgridTMP[index1 - 1][index2 - 1] = true;\n          }\n\n          if (cellsAlive === 3 && GridAroundCurrentCell3x3[1][1] == true) {}\n\n          if (cellsAlive === 2) {}\n        }\n      }\n\n      biggerGrid.push(row);\n    }\n\n    this.setState({\n      biggergridArray: biggerGrid\n    });\n    this.setState({\n      gridArray: newgridTMP\n    }); //this.setState({ gridArray: biggerGrid});  // Use this line instead of the one above, to display the bigger grid instead of the original. \n  }\n\n  determineArrayDimensions() {\n    let yLengthTMP = this.state.gridArray.length;\n    let xLengthTMP = this.state.gridArray.reduce((x, y) => Math.max(x, y.length), 0);\n    this.setState({\n      gridXLength: xLengthTMP\n    });\n    this.setState({\n      gridYLength: yLengthTMP\n    });\n  }\n\n  fillGrid() {\n    let gridTMP = this.state.gridArray;\n    let index1; // Fill Grid with false.\n\n    for (index1 = 0; index1 < this.state.gridYLength; index1++) {\n      let index2;\n      let row = [];\n\n      for (index2 = 0; index2 < this.state.gridXLength; index2++) {\n        row.push(false);\n      }\n\n      gridTMP.push(row);\n    }\n\n    this.setState({\n      gridArray: gridTMP\n    });\n  }\n\n  componentWillMount() {}\n\n  componentDidMount() {\n    let gridXLengthtmp = 45; //prompt(\"Length\");\n\n    let gridYHeigthtmp = 13;\n    ; //prompt(\"Heigth\");\n\n    this.setState({\n      gridXLength: Number(gridXLengthtmp)\n    });\n    this.setState({\n      gridYLength: Number(gridYHeigthtmp)\n    });\n    alert(typeof this.state.gridXLength + this.state.gridXLength);\n    this.fillGrid(); //alert(this.state.gridXLength);\n    //this.determineArrayDimensions();\n    //this.calculateNextGeneration();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"GridDiv\",\n          children: [this.state.gridArray.map((Element, index) => /*#__PURE__*/_jsxDEV(Rows, {\n            indexRow: index,\n            value: Element,\n            onCellClick: this.onCellClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 61\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            fill: \"blue\",\n            width: \"100px\",\n            height: \"100px\",\n            onClick: () => this.stepFunction(),\n            children: \"Play\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App; //              { this.state.gridArray.map(Element => Element.map(Element2 => <CellComp value={Element2}/>)) }","map":{"version":3,"sources":["/home/rootuser/Desktop/GameOfLife/gameoflife/src/App.js"],"names":["Component","Rows","App","constructor","props","onCellClick","indexCol","indexRow","gridTMP","state","gridArray","setState","biggergridArray","gridXLength","gridYLength","stepFunction","interval","setInterval","calculateNextGeneration","newgridTMP","biggerGrid","index1","index2","row","push","GridAroundCurrentCell3x3","index3","index4","cellsAlive","determineArrayDimensions","yLengthTMP","length","xLengthTMP","reduce","x","y","Math","max","fillGrid","componentWillMount","componentDidMount","gridXLengthtmp","gridYHeigthtmp","Number","alert","render","map","Element","index"],"mappings":"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","sourcesContent":["import './App.css';\nimport { Component } from 'react';\nimport Rows from './Rows.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      //gridArray:[ [ \"1\", \"2\", \"3\"], [ \"4\", \"5\" , \"6\"], [ \"6\", \"7\" , \"8\"] ],\n      //gridArray:[ [ true, false, false], [ false, true , false], [ true, false , true] , [ false, false , false]],\n      gridArray: [],\n      biggergridArray: [],\n\n      gridXLength: 10,//prompt(\"length\"),\n      gridYLength: 10,//prompt(\"height\"),\n\n    }\n  }\n\n  // When clicked on a Cell, then switch that cells status.\n  onCellClick = (indexCol, indexRow) => {\n    let gridTMP = this.state.gridArray;\n    gridTMP[indexRow][indexCol] = !gridTMP[indexRow][indexCol];\n\n    this.setState({gridArray: gridTMP});\n  }\n\n  // Function to call when the button is clicked.\n  stepFunction(){\n    var interval = setInterval(() => this.calculateNextGeneration(), 20);\n    //this.calculateNextGeneration()\n  }\n\n  // Function to calculate the next generation of hte current grid,\n  // according to the rules of the game of life.\n  calculateNextGeneration(){\n    let gridTMP = this.state.gridArray;\n    let newgridTMP = this.state.gridArray;\n\n    let biggerGrid = [];\n\n    let index1;\n\n    // Fill the bigger Grid with the original grid and an outer line of cells with false.\n    for (index1 = 0; index1 < this.state.gridYLength + 2; index1++){\n      let index2;\n      let row = [];\n      for (index2 = 0; index2 < this.state.gridXLength + 2; index2++){\n        \n        // If the current cell is on the outermost loop of the bigger grid, fill it with false.\n        if(index1 == 0 || (index1 == this.state.gridYLength+1) || index2 == 0 || (index2 == this.state.gridXLength+1)){\n          row.push(false);\n        }\n\n        // If the current cell is NOT on the outermost loop of the bigger grid, fill it with the content the the grid.\n        else{\n          row.push(gridTMP[index1-1][index2-1]);\n        }\n      }\n      biggerGrid.push(row)\n\n    }\n\n\n    for (index1 = 0; index1 < this.state.gridYLength + 2; index1++){\n      let index2;\n      let row = [];\n      for (index2 = 0; index2 < this.state.gridXLength + 2; index2++){\n        \n        // If the current cell is NOT on the outermost loop of the bigger grid, do the game of life things.\n        if(!(index1 == 0 || (index1 == this.state.gridYLength+1) || index2 == 0 || (index2 == this.state.gridXLength+1))){\n          let GridAroundCurrentCell3x3 = [];\n\n          let index3;\n          for (index3 = 0; index3 < 3; index3++){\n            let index4;\n            let row = [];\n            for (index4 = 0; index4 < 3; index4++){\n              row.push(biggerGrid[index1-1+index3][index2-1+index4]);\n            }     \n            GridAroundCurrentCell3x3.push(row);\n          }\n\n          let cellsAlive = 0;\n\n          // Count the number of alive cells in the current 3x3 grid.\n          for (index3 = 0; index3 < 3; index3++){\n            let index4;\n            for (index4 = 0; index4 < 3; index4++){\n              if(GridAroundCurrentCell3x3[index3][index4] == true){\n                cellsAlive++;\n              }\n            }     \n          }\n\n          // Simply reduce number of Cells alive by one if the current cell is alive itself.\n          if(GridAroundCurrentCell3x3[1][1] == true){\n            cellsAlive--;\n          }\n\n          // Check for which rule to apply.\n          if(cellsAlive < 2){\n            newgridTMP[index1-1][index2-1] = false;\n          }\n\n          if(cellsAlive >= 4){\n            newgridTMP[index1-1][index2-1] = false;\n          }\n\n          if(cellsAlive === 3 && GridAroundCurrentCell3x3[1][1] == false){\n            newgridTMP[index1-1][index2-1] = true;\n          }\n\n          if(cellsAlive === 3 && GridAroundCurrentCell3x3[1][1] == true){\n          }\n\n          if(cellsAlive === 2){\n          }\n        }\n      \n      }\n      biggerGrid.push(row)\n\n    }\n\n\n    this.setState({ biggergridArray: biggerGrid});\n    this.setState({gridArray: newgridTMP})\n    //this.setState({ gridArray: biggerGrid});  // Use this line instead of the one above, to display the bigger grid instead of the original. \n\n\n  }\n\n  determineArrayDimensions(){\n    let yLengthTMP = this.state.gridArray.length;\n    let xLengthTMP = this.state.gridArray.reduce((x, y) => Math.max(x, y.length), 0);\n\n    this.setState({gridXLength: xLengthTMP});\n    this.setState({gridYLength: yLengthTMP});\n\n\n  }\n  \n  fillGrid(){\n    let gridTMP = this.state.gridArray;\n\n    let index1;\n\n    // Fill Grid with false.\n    for (index1 = 0; index1 < this.state.gridYLength; index1++){\n      let index2;\n      let row = [];\n      for (index2 = 0; index2 < this.state.gridXLength; index2++){\n        row.push(false);\n      }\n      gridTMP.push(row)\n    }\n    \n    this.setState({ gridArray: gridTMP});\n\n  }\n\n  componentWillMount(){\n\n  }\n\n  componentDidMount(){\n    let gridXLengthtmp = 45//prompt(\"Length\");\n    let gridYHeigthtmp = 13;;//prompt(\"Heigth\");\n\n    this.setState({ gridXLength: Number(gridXLengthtmp)});\n    this.setState({ gridYLength: Number(gridYHeigthtmp)});\n\n    \n    alert(typeof(this.state.gridXLength) + this.state.gridXLength);\n\n    this.fillGrid(); \n\n    //alert(this.state.gridXLength);\n    //this.determineArrayDimensions();\n    //this.calculateNextGeneration();\n\n\n\n  }\n\n  render(){\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n  \n        <body>\n\n            <div className=\"GridDiv\">\n              { this.state.gridArray.map((Element, index)=> <Rows indexRow={index} value={Element} onCellClick={this.onCellClick}/>) }\n\n              <button fill=\"blue\" width=\"100px\" height=\"100px\" onClick={() => this.stepFunction()}>Play</button>\n            </div>\n\n        </body>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n//              { this.state.gridArray.map(Element => Element.map(Element2 => <CellComp value={Element2}/>)) }\n"]},"metadata":{},"sourceType":"module"}